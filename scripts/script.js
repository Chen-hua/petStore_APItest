/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.6
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 7.0.1-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://petstore.swagger.io/v2";
// Global variables should be initialized.


export default function() {
    
    const vars = {} 
    group("Add/update/uploadPhoto Pet", () => {

        // Request No. 1: addPet
        {
            let url = BASE_URL + `/pet`;
            let body = {"id": 0, "category": {"id": 1, "name": "pajaro"}, "name": "pupo", "photoUrls": "", "tags": "", "status": "available"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let resp = http.post(url, JSON.stringify(body), params);

            check(resp, {
                "OK": (r) => r.status === 200,
                "pet name": (r) => r.json().name == "pupo"
            });
            vars['petId'] = resp.json('id');
            vars['petName'] = resp.json('name');

        }
        
        // Request No. 2: updatePet
        {
            let url = BASE_URL + `/pet`;
            let photoUrls = ["","",""];
            let body = {"id": vars['petId'], "category": {"id": "long", "name": "string"}, "name": vars['petName'], "photoUrls": photoUrls, "tags": ["Super cute"], "status": "available"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let resp = http.put(url, JSON.stringify(body), params);

            check(resp, {
                "OK": (r) => r.status === 200,
                "pet name": (r) => r.json().name == "pupo",
                "pet tag": (r) => r.json().tags[0] == "Super cute"
            });

        }

        // Request No. 3: uploadFile
        {
            let url = BASE_URL + `/pet/`+vars['petId']+`/uploadImage`;
            let body = {"additionalMetadata": "string", "file": http.file(open("/path/to/file.bin", "b"), "test.bin")};
            let params = {headers: {"Content-Type": "multipart/form-data", "Accept": "application/json"}};
            let resp = http.post(url, JSON.stringify(body), params);

            check(resp, {
                "OK": (r) => r.status === 200
            });
        }

        
    });
    
    group("placed/get/delete order with Pet", () => {

        
        let petId = vars['petId']; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPetById
        {
            let url = BASE_URL + `/pet/${petId}`;
            let resp = http.get(url);

            check(resp, {
                "OK": (r) => r.status === 200,
                "pet name": (r) => r.json().name == "pupo"
            });
        }
        
        // Request No. 1: placeOrder
        {
            let url = BASE_URL + `/store/order`;
            let body = {"id": 1, "petId": vars['petId'], "quantity": 1, "shipDate": "date", "status": "string", "complete": "boolean"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let resp = http.post(url, JSON.stringify(body), params);

            check(resp, {
                "successful operation": (r) => r.status === 200
            });
            vars['orderId'] = resp.json().id;
        }

        let orderId = vars['orderId'];

        // Request No. 2: getOrderById
        {
            let url = BASE_URL + `/store/order/${orderId}`;
            let resp = http.get(url);
        
            check(resp, {
                "OK": (r) => r.status === 200,
                "pet ID": (r) => r.json == vars['petId']
            });        
        }

        // Request No. 3: deleteOrder
        {
            let url = BASE_URL + `/store/order/${orderId}`;
            let resp = http.del(url);

            check(resp, {
                "OK": (r) => r.status === 200
            });

        }
    });

    group("Get pet by ID/Status/Tags and delete it", () => {
        let petId = vars['petId']; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPetById
        {
            let url = BASE_URL + `/pet/`+vars['petId'];
            let resp = http.get(url);

            check(resp, {
                "OK": (r) => r.status === 200,
                "pet ID": (r) => r.json == vars['petId']
            });

        }

        // Request No. 2: findPetsByTags
        { 
            let tags = "Super cute"
            let url = BASE_URL + `/pet/findByTags?tags=${tags}`;
            let resp = http.get(url);

            check(resp, {
                "OK": (r) => r.status === 200,
                "pet ID": (r) => r.json == vars['petId']
            });
        }

        // Request No. 3: deletePet
        {
            let url = BASE_URL + `/pet/${petId}`;
            let params = {headers: {"api_key": `${apiKey}`, "Accept": "application/json"}};
            // this is a DELETE method request - if params are also set, empty body must be passed
            let resp = http.del(url, {} , params);

            check(resp, {
                "OK": (r) => r.status === 200,
            });

        }
    });

}
